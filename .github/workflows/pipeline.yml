name: Deployment Pipeline

on:
  push:
    branches: [main] # Sölo con esto mira los push en la rama MAIN. SI queremos que tb mire cuando se hace un PR, se hace los siguiente
  pull_request:
    branches: [main]
    types: [opened, synchronize] # cuando se abre el PR y cuando se hace otro commit en él

jobs:

  avoid_reduncy:
    runs-on: ubuntu-18.04
    steps:
      - name: Cancel Previous Redundant Builds
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  # test para el lint
  lint:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2 # Es la app 'checkout' del MarketPlace para traernos nuestro código ala máquina virtual. Sölo se trae el último commit para que sea mas rápido
        # para saber usarlo, mirar https://github.com/marketplace/actions/checkout
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2 # para agregar el node en nuestro repo en la máq virtual: https://github.com/marketplace/actions/setup-node-js-environment
        with:
          cache: 'npm'
          node-version: '14'
      - name: Install dependencies # que instale las dependencies
        run: npm ci # podemos agregar: 'npm ci --no-audit --no-found --no-optional' para que no instale cosas que tarda más tiempo luego en hacer el test
      - name: Lint
        run: npm run eslint

  # test para el build
  build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          cache: 'npm'
          node-version: '14'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - uses: actions/upload-artifact@v2 # https://github.com/marketplace/actions/upload-a-build-artifact
        with:
          name: dist
          path: dist

  # npm test (hacer los test)
  test:
    needs: [lint, build]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          cache: 'npm'
          node-version: '14'
      - name: Install dependencies
        run: npm ci
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Test
        run: npm test

  # Test end to end (con cypress). Podrías instalar la dependencia de cypress pero com es tan grande este dep, vamos a agregarla sólo cuando sea necesario. Para ello, en package.json agregamos script nuevo: "test:e2e": "npx cypress run"
  # y con 'npx' sólo va a ejcutar cypress y a instalarlo cuando hagamos este script
  # Los test e2e son mucho mas lentos. Te hacen hasta un video porque son para ver que la UX está funcionando bien, poer intentar hacer lo smenos posibles por lo que tardan
  e2e:
    needs: [lint, build]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          cache: 'npm'
          node-version: '14'
      - name: Install dependencies
        run: npm ci
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: E2E tests
        uses: cypress-io/github-action@v2 # https://github.com/marketplace/actions/cypress-io
        with:
          command: npm run test:e2e
          start: npm run start-test # abrir/inicializar la app antes
          wait-on: http://localhost:5000 # que se levante el servidor antes de que empiecen los test

  deploy:
    needs: [test, e2e]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Deploy to Heroku
        if: ${{ github.event_name == 'push' }}
        uses: akhileshns/heroku-deploy@v3.12.12 # https://github.com/marketplace/actions/deploy-to-heroku
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}} # el nombre (HEROKU_API_KEY) que he usado en los secrets de Gituhub en mi repo /settings/secrets/actions/
          heroku_app_name: ${{secrets.HEROKU_APP}}
          heroku_email: ${{secrets.HEROKU_API_EMAIL}}
          healthcheck: "https://${{secrets.HEROKU_APP}}.herokuapp.com/health" # si entras en http://localhost:5000/health te da OK. Sino, hace rollback -> vuelve a una versión anterior que esté funcioanndo
          rollbackonhealthcheckfailed: true
